<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tanjie的博客</title>
  <icon>https://www.gravatar.com/avatar/532fdadb94b1845e241430797f503018</icon>
  <subtitle>来，一起学习</subtitle>
  <link href="/Mrtan.blog/atom.xml" rel="self"/>
  
  <link href="https://0tanjie0.github.io/Mrtan.blog/"/>
  <updated>2019-09-28T02:14:48.612Z</updated>
  <id>https://0tanjie0.github.io/Mrtan.blog/</id>
  
  <author>
    <name>Tan Jie</name>
    <email>tan0jie@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文</title>
    <link href="https://0tanjie0.github.io/Mrtan.blog/2019/12/27/%E8%AE%BA%E6%96%87/"/>
    <id>https://0tanjie0.github.io/Mrtan.blog/2019/12/27/%E8%AE%BA%E6%96%87/</id>
    <published>2019-12-27T10:49:49.388Z</published>
    <updated>2019-09-28T02:14:48.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于眼纹跟踪的视线方向检测"><a href="#基于眼纹跟踪的视线方向检测" class="headerlink" title="基于眼纹跟踪的视线方向检测"></a>基于眼纹跟踪的视线方向检测</h1><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h3><h3 id="1-2国内外研究现状"><a href="#1-2国内外研究现状" class="headerlink" title="1.2国内外研究现状"></a>1.2国内外研究现状</h3><h3 id="1-3-1-眼纹跟踪系统的研究现状"><a href="#1-3-1-眼纹跟踪系统的研究现状" class="headerlink" title="1.3.1 眼纹跟踪系统的研究现状"></a>1.3.1 眼纹跟踪系统的研究现状</h3><h3 id="1-3-论文的主要结构和内容"><a href="#1-3-论文的主要结构和内容" class="headerlink" title="1.3 论文的主要结构和内容"></a>1.3 论文的主要结构和内容</h3><h2 id="第二章-视线跟踪系统的总体设计"><a href="#第二章-视线跟踪系统的总体设计" class="headerlink" title="第二章 视线跟踪系统的总体设计"></a>第二章 视线跟踪系统的总体设计</h2><h2 id="第三章-系统的硬件设计"><a href="#第三章-系统的硬件设计" class="headerlink" title="第三章 系统的硬件设计"></a>第三章 系统的硬件设计</h2><h2 id="第四章-系统的软件设计"><a href="#第四章-系统的软件设计" class="headerlink" title="第四章 系统的软件设计"></a>第四章 系统的软件设计</h2><h2 id="第五章-眼纹跟踪"><a href="#第五章-眼纹跟踪" class="headerlink" title="第五章 眼纹跟踪"></a>第五章 眼纹跟踪</h2><h2 id="第六章-系统测试与分析"><a href="#第六章-系统测试与分析" class="headerlink" title="第六章 系统测试与分析"></a>第六章 系统测试与分析</h2><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于眼纹跟踪的视线方向检测&quot;&gt;&lt;a href=&quot;#基于眼纹跟踪的视线方向检测&quot; class=&quot;headerlink&quot; title=&quot;基于眼纹跟踪的视线方向检测&quot;&gt;&lt;/a&gt;基于眼纹跟踪的视线方向检测&lt;/h1&gt;&lt;h2 id=&quot;第一章-绪论&quot;&gt;&lt;a href=&quot;#第一章
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://0tanjie0.github.io/Mrtan.blog/2019/12/27/hello-world/"/>
    <id>https://0tanjie0.github.io/Mrtan.blog/2019/12/27/hello-world/</id>
    <published>2019-12-27T02:19:47.677Z</published>
    <updated>2019-12-27T02:19:47.678Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="https://0tanjie0.github.io/Mrtan.blog/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://0tanjie0.github.io/Mrtan.blog/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2019-08-15T12:15:40.859Z</published>
    <updated>2019-04-27T04:44:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>为准备笔试等要学习的内容</p><hr><center>数据结构与算法</center><ol><li>程序设计=数据结构+算法</li><li>数据结构就是关系，数据元素相互之间存在的一种或多种特定关系的集合</li></ol><p>逻辑结构和物理结构：</p><p>逻辑结构：数据对象中数据元素之间的相互关系：集合结构、线性结构、树形结构、图形结构</p><p>物理结构：数据的逻辑结构在计算机中的存储形式、针对内存来说</p><p>顺序存储结构：数据元素存放在地址连续的存储单元里，数据见的逻辑关系和物理关系是一致的</p><p>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。链式存储结构的数据元素存储关系并不能反应逻辑关系，需要一个指针存放数据元素的地址，通过地址找到关联数据元素的位置。</p><p>输入、输出、有穷性、确定性、可行性</p><p>算法要求：正确性、可读性、健壮性、时间效率高和存储量低</p><p>算法效率的度量方法</p><p>事前分析估算方法：</p><p>研究算法的复杂度主要是研究算法随着输入规模扩大增长量的一个抽象，不是精确的定位需要执行多少次。不计循环索引的递增和循环终止条件、变量声明、打印结果等。</p><p>重要的是把基本操作的数量和输入模式关联起来。对于数据模型的大小，考虑的是n趋于无穷大时候n的程序模型。主要是关注主项的阶数。</p><p>时间复杂度和空间复杂度。</p><p>时间复杂度中的常数项不要，系数不要，留下的n的阶数就是大o阶。对数阶。</p><p>函数调用的复杂度分析。注意是整体函数的阶数</p><p>算法的空间复杂度</p><p>线性表（List）：零个或者多个数据元素组成的有限序列。若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他元素都有且只有一个前驱和后继。</p><p>数据类型：指的是一组性质相同的值的集合以及定义在此集合上的一些操作的总称。类如整形、浮点型。</p><p>抽象数据类型：指一个数学模型以及定义在该模型上的一组操作。仅取决于他的一组逻辑特性，而与其在计算机内部如何表示和实现无关。把数据类型和相关操作捆绑在一起。</p><p>线性表的顺序存储结构：利用已有的数组的结构，进行一定的增删改查和属性操作。缺点：插入和删除时候需要移动大量的元素。容易出现磁盘碎片，在申请内存的时候都是一块一块申请的。</p><p>线性表的链式存储结构：用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。存储数据元素信息的域称为数据域，存储后继位置的域称为指针域。两个信息称为存储映像，也即结点（node）。链表的第一个结点存储位置叫头指针，最后一个结点的指针为空。</p><p>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。头指针具有标识作用，常用头指针冠以链表的名字（指针变量的名字），无论链表是否为空，头指针均不为空。链表必要元素。链表的查找需要从头开始一个个索引，时间复杂度为O(n)。</p><p>单链表结构和顺序存储结构优缺点</p><p>存储方式：顺序存储结构用一段连续的存储单元依次存储线性表的数据元素。单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素。、</p><p>查找：顺序存储结构O(1)，单链表O(n)</p><p>插入和删除：顺序O(n),单链表O(1)</p><p>如果线性表需要频繁查找，则需要用顺序存储结构，如果需要频繁插入则需要用单链表结构，如果不知道大小的话则用单链表</p><p>链表方便进行插入和删除操作，而顺序存储结构则不是，每次进行插入和删除的时间复杂度都是O(n)。</p><p>静态链表：利用数组来模拟链表的操作。第一个元素的游标存放没有元素的下标，最后一个元素的游标存放有元素的下标。最后一个有元素的游标为0.</p><p>快慢指针原理： </p><p>循环列表： 单链表不可逆，不从头结点开始无法访问所有结点。将单结点中终端结点的指针端由空指针改为指向头结点，就使整个单链形成一个环。</p><p>主要差异在意判断空链表的条件上，由原来判断<code>head-&gt;next</code>是否为<code>null</code>，现在判断为<code>head-&gt;next</code>是否为<code>head</code></p><p>好像在进行分析的时候，很多时候头结点并不是第一个结点，头结点的指针是指向第一个结点的。也就是说头结点在实际意义上其实没有内容存在。     </p><p>双向循环链表：每一个结点多了一个proir的指针。 </p><ol><li>列表初始化</li><li>中间有一个地方不是很理解。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*L)&#x3D;(*L)-&gt;next;</span><br></pre></td></tr></table></figure><hr><p>栈：栈是一个后进先出的线性表，要求只在表尾进行删除和插入操作。对于栈来说，这个表尾称为栈的栈顶，相应的表头称为栈底。</p><p>在进行地址相减的时候，得到的不是地址的差，而是两个地址之间相差几个元素。</p><p>在进行括号匹配的时候，可以利用栈的方式进行。二进制到十进制。</p><p>栈的链式存储结构： </p><p>逆波兰计算器</p><p>中缀表达式转换为后缀表达式：如何将$(1-2)*(4+5)$转化为$1 2 - 4 5 +$</p><p>中间在利用栈对数据进行记录的时候，必须考虑用字符的形式进行输入，因为如果你输入的是数字的话，不能区别位数，造成混乱。但是利用字符形式进行输入的时候，也必须对超过一位数的数据进行区分。</p><hr><p>队列：只允许在一端进行插入操作，另外一端进行删除的线性表。和栈相反，先进先出。我们的输入缓冲区接受键盘的输入就是按照队列的形式输入和输出的。</p><p>一般用链表来实现队列。 也可以用顺序存储来实现</p><p>递归：效率低下算法，不如迭代。递归中会创建很多的函数副本，消耗内存</p><p>分治思想：</p><p>汉诺谈问题</p><p>八皇后问题</p><p>字符串：由0个或者多个字符组成的有限序列，又名字符串。$\0$表示字符串的结束</p><p> 字串和主串：</p><p>字符串的比较更加重视是否相等。</p><p>BF匹配算法是朴素的模式匹配算法</p><p>KMP匹配算法：</p><p>上面的算法需要好好的自己熟悉一下</p><hr><p>树：n&gt;0的时候根的结点是唯一的。结点拥有的子树数称为结点的度。树的度取树内各结点的度的最大值。</p><p>度为0的结点称为叶结点或者终端结点。  </p><p>双亲表示法：以双亲作为索引的关键词</p><p>孩子表示法：由于书中的每个结点可能有多棵子树，可以考虑用多重链表来实现。</p><p> 双亲孩子表示法，兄弟之间可以相互索引</p><p><img src="images/1556261367515.png" alt="1556261367515"></p><hr><p>二叉树：每个节点最多有两颗子树。二叉树是有顺序的，左子树和右子树是不能跌到的。</p><p>斜树：</p><p>满二叉树：</p><p>完全二叉树：</p><p>二叉树的性质：</p><ol><li>在二叉树的第i层，至多有$2^(i-1)$个结点。</li><li>深度为K的二叉树，至多有$2^k-1$个结点</li><li>如果终端结点数为$n_0$,度为2的结点数为$n_2$，则$n_0=n_2+1$</li><li>具有n个结点的完全二叉树的深度为$|log_2n|+1$</li><li>如果一棵有n个结点的完全二叉树(其深度为$log_2n+1$)的结点按层序编号，对任一结点$i(1&lt;=i&lt;=n)$有下面性质：i=1,则结点i是二叉树的根，无双亲，i&gt;1,双亲是结点[i/2]</li></ol><p><img src="images/1556262893890.png" alt="1556262893890"></p><p>树的存储结构：单单用顺序存储结构或者链式存储结构来存放时不行的</p><p>二叉树是特殊的树，使用顺序存储结构或者链式存储结构都能够简单实现。顺序存储结构就是用一维数组存储二叉树中的各个结点，并且结点的存储位置能够体现结点之间的逻辑关系。</p><p><img src="images/1556263247211.png" alt="1556263247211"></p><p>二叉树的遍历：从根结点出发，按照某种次序依次访问二叉树中所有结点。</p><p>前序遍历：先访问左子树到底，再依次访问右子树</p><p>中序遍历：</p><p>后序遍历：</p><p>层序遍历：</p><p>线索二叉树：后续进行实现</p><p><img src="images/1556264756738.png" alt="1556264756738"></p><p>普通树，森林，二叉树的如何转换。兄弟之间加连线，除长子之外的连线全部删除</p><p>赫夫曼树： 二叉树简化为叶子结点带权的二叉树。</p><p>结点的路径长度，树的路径长度，结点带权的路径长度，树的带权结点长度。让最小的权值的数目放在最小面就行。</p><p>定长编码、变长编码、前缀码。</p><p>赫夫曼编码的实现：后面需要努力</p><hr><p>图：图中数据元素称为顶点，有穷非空。</p><p>无向边：</p><p>有向边：</p><p>无向完全图：</p><p>有向完全图：</p><p>稀疏图，稠密图：</p><p>带权的图称为网：</p><p>度：入度和出度</p><p>图的存储结构：因为任意两个顶点之间都可能存在联系，因此无法以数据元素在内存中的物流位置来表示元素之间的关系。内存物理位置是线性的，图的元素关系是平面的。</p><p>邻接矩阵（无向图）：用两个数组来表示图，一个一维数组存储途中顶点信息，一个二维数组存储图中的边或弧信息。有连接用1表示，没有连接用0表示。下面无向，为对称矩阵。</p><p><img src="images/1556281122146.png" alt="1556281122146"></p><p>有向图将会得到一个不对称的矩阵。</p><p><img src="images/1556281294048.png" alt="1556281294048"></p><p>出度对应于行，入度对应于列</p><p>网</p><p><img src="images/1556281426640.png" alt="1556281426640"></p><p>邻接表：如果是有向图的话需要建立一个逆邻接表</p><p>十字链表：</p><p>邻接多重表：需要重新理解一下</p><p>边集数组： </p><p>图的遍历：</p><p>深度优先遍历：</p><p>马踏棋盘算法：</p><p>广度优先遍历：可以利用队列来实现</p><p> 带权最小生成树：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为准备笔试等要学习的内容&lt;/p&gt;
&lt;hr&gt;
&lt;center&gt;数据结构与算法&lt;/center&gt;

&lt;ol&gt;
&lt;li&gt;程序设计=数据结构+算法&lt;/li&gt;
&lt;li&gt;数据结构就是关系，数据元素相互之间存在的一种或多种特定关系的集合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;逻辑结构和物理结构：&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
